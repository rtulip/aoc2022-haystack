fn split_lines(&String: s) -> [Vec<String>] {
    Vec.new::<String> as [mut lines]
    0 0 while dup s String.size < { as [i]
        i s String.at Opt.unwrap '\n' == if {
            as [start]
            start i s String.substr *lines Vec.push
            i 1 +
        }
        i 1 +
    } drop drop 
    lines
}

fn Str.strip_non_numeric(Str: s) -> [Str] {
    0 while as [i] { i
        i s::size 1 - <
        i &s Str.at char.is_numeric lnot land
    } { 1 + }
    s Str.split swap drop

}

fn Str.parse_next_num(Str: mut s) -> [u64 Str] {
    s Str.strip_non_numeric *s !
    0 while as [i] { i
        i s::size 1 - <
        i &s Str.at char.is_numeric land
    } { 1 + }

    s Str.split as [left right]

    left::size 0 == if {
        right Str.parse_u64
        left
    } else {
        left Str.parse_u64
        right
    }
    
}