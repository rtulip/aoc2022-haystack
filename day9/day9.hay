include "aoc2022/aoc_utils.hay"
include "std/linear_map.hay"

enum Dir { Up Down Left Right }
fn Dir.from_char(char: c) -> [Dir] {
    c 'U' == if {
        Dir::Up
    } else c 'D' == if {
        Dir::Down
    } else c 'L' == if {
        Dir::Left
    } else {
        Dir::Right 
    }
}

struct Point {
    pub u64: x
    pub u64: y
impl:
    fn Point.distance(Point: other Point: self) -> [u64] {
        self::x other::x - dup *
        self::y other::y - dup *
        + 
    }
}

impl Print<Point> {
    fn print(Point: p) {
        "(" print
        p::x     print
        ", "     print
        p::y     print
        ")"      print
    }
}

impl Format<Point> {
    fn fmt(String Point) -> [String] {
        as [p]
        '('  fmt
        p::x fmt
        ','  fmt
        p::y fmt
        ')'  fmt 
    }
}

impl Add<Point Dir> {
    Point: Output
    fn add(Point: p Dir: d) -> [Point] {
        d Dir::Up == if {
            
            p::y 0 == if {
                "unsighed int underflow while moving up" println
                1 exit
            }
            
            p::x p::y 1 - cast(Point)
        } else d Dir::Down == if {
            p::x p::y 1 + cast(Point)
        } else d Dir::Left == if {
            p::x 0 == if {
                "unsighed int underflow while moving left" println
                1 exit
            }
            p::x 1 - p::y cast(Point)
        } else d Dir::Right == if {
            p::x 1 + p::y cast(Point)
        } else {
            "Unreachable state in Add<Point Dir>" println
            1 exit
            p
        }
    }
}

impl Add<Point Point> {
    Point: Output
    fn add(Point: left Point: right) -> [Point] {
        left::x right::x +
        left::y right::y +
        cast(Point)
    }
}

struct Move {
    pub Dir: dir
    pub u64: cnt
impl:
    fn Move.take(
        Point: mut prev 
        Point: mut tail 
        Point: mut head 
        Move:  mut self
        *Map<u64>: visited
    ) -> [Point Point Point] {

        "=== " print self print " ===" println

        while self::cnt 0 > {
            self::cnt 1 - *self::cnt !
            head *prev !
            head self::dir + *head ! 

            "Head: " print head print " Tail: " print tail print " Distance: " print head tail Point.distance println 
            head tail Point.distance 2 > if {
                prev *tail !
                "  Tail Moved: " print tail println

                "" String.new 
                tail fmt as [string]
                &string String.as_str as [str]
                str visited Map.get_mut as [maybe_count]
                &maybe_count Opt.is_some if {
                    maybe_count Opt.unwrap as [count]
                    count @ 1 + count !
                    "  key: " print str print " value: " print count println
                } else {
                    str 1 visited Map.insert drop
                    "  Inserted " print str println
                }

            }
        }

        prev tail head

    }
}

impl Print<Move> {

    fn print(Move: self) {
        self::dir Dir::Up == if {
            "Up" print
        } else self::dir Dir::Down == if {
            "Down" print
        } else self::dir Dir::Left == if {
            "Left" print
        } else self::dir Dir::Right == if {
            "Right" print
        } else {
            "... Unreachable" print
        }

        " " print self::cnt print
    }

}

fn parse_move(String: s) -> [Move] {

    &s String.as_str as [str]
    0 &str Str.at Dir.from_char
    2 str::size 2 - str Str.substr Str.parse_u64
    cast(Move)
    &s String.delete
}

fn parse_moves(Vec<String>: mut lines) -> [Vec<Move>] {
    Vec.new::<Move> as [mut moves]
    while &lines Vec.is_empty lnot {
        *lines Vec.pop Opt.unwrap parse_move *moves Vec.push
    }
    moves
}

fn take_moves(Vec<Move>: mut moves) -> [Map<u64>] {

    Map.new::<u64> as [mut visited]
    50000 50000 cast(Point) as [start]

    "" String.new
    start fmt as [string]
    &string String.as_str 1 *visited Map.insert drop

    start start start while &moves Vec.is_empty lnot  {
        *moves Vec.pop Opt.unwrap *visited Move.take 
    } drop drop drop

    visited

}

fn part1(Str) -> [u64] { 
    File.read_to_string as [file_str]
    &file_str split_lines parse_moves take_moves as [visited]

    &visited Map.len
    
}

fn main() {
    "aoc2022/day9/example.txt" part1 as [example]     
    "Example answer: " print example println
    example 13 == assert
    
    "aoc2022/day9/input.txt" part1 as [answer]     
    "Part 1 answer: " print answer println
    
    //"aoc2022/day9/example.txt" part2 as [example]     
    //"Example answer: " print example println

    //"aoc2022/day9/input.txt" part2 as [answer]     
    //"Part 2 answer: " print answer println
}